#!/usr/bin/python
#-*- coding: utf-8 -*-

import sys
import os.path
import sqlite3
import argparse
import logging

import xlrd

ROW_START = 1

COL_LOCATION = 2 # 주소
COL_NAME = 4
COL_PROPERTY = 7 # (일반|자율|특성화|특수목적)고등학교
COL_GENDER = 25 # 남, 녀, 남녀공학


def load_xlsx(src):
    workbook = xlrd.open_workbook(src)
    sheet = workbook.sheet_by_index(0)

    locations = sheet.col_values(COL_LOCATION, ROW_START)
    names = sheet.col_values(COL_NAME, ROW_START)
    properties = sheet.col_values(COL_PROPERTY, ROW_START)
    genders  = sheet.col_values(COL_GENDER, ROW_START)

    return zip(locations, names, properties, genders)


def write_sqlite(data, dest):
    conn = sqlite3.connect(dest)
    cursor = conn.cursor()

    cursor.execute('''CREATE TABLE schools (location text, name text, property text, gender text)''')

    for d in data:
        location, name, prop, gender = d
        cursor.execute('INSERT INTO schools (location, name, property, gender) VALUES (?, ?, ?, ?)', d,)

    conn.commit()

    cursor.close()
    conn.close()


def main():
    logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')

    argparser = argparse.ArgumentParser(description='A program to convert schools xlsx to sqlite3 db.\nVisite http://www.schoolinfo.go.kr/ng/pnnggo_a01_l0.do to get xlsx file.')
    argparser.add_argument('--src', required=True, help='Schools Excel file path.')
    argparser.add_argument('--dest', required=True, help='Sqlite3 DB file path.')
    argparser.add_argument('--force', action='store_true', help='Remove the existing file and continue migration.')
    args = argparser.parse_args()

    if not os.path.exists(args.src):
        logging.info('%s file doesn\'t exist.' % args.src)
        sys.exit(64)

    if os.path.exists(args.dest):
        if not args.force:
            logging.info('%s file already exists. Do you want overwrite it? [Y/N]' % args.dest)
            answer = sys.stdin.readline()
            if answer.strip().lower() != 'y':
                sys.exit(64)

        logging.info('Removing %s file...' % args.dest)
        os.remove(args.dest)
        logging.info('done.')

    logging.info('Loading excel file...')
    data = load_xlsx(args.src)
    logging.info('Done.')

    logging.info('Writing db...')
    write_sqlite(data, args.dest)
    logging.info('Done.')

    logging.info('Successfully %d data are loaded!' % len(data))


if __name__ == '__main__':
    main()
